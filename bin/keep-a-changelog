#!/usr/bin/env php
<?php
/**
 * @see       https://github.com/phly/keep-a-changelog for the canonical source repository
 * @copyright Copyright (c) 2018-2019 Matthew Weier O'Phinney
 * @license   https://github.com/phly/keep-a-changelog/blob/master/LICENSE.md New BSD License
 */

declare(strict_types=1);

namespace Phly\KeepAChangelog;

use PackageVersions\Versions;
use Phly\EventDispatcher\EventDispatcher;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputOption;

// Setup/verify autoloading
if (file_exists($a = __DIR__ . '/../../../autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../vendor/autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../autoload.php')) {
    require $a;
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}

$version = strstr(Versions::getVersion('phly/keep-a-changelog'), '@', true);
$dispatcher = new EventDispatcher(new ListenerProvider());

$application = new Application('keep-a-changelog', $version);

$application->getDefinition()
    ->addOptions([
        new InputOption('changelog', 'c', InputOption::VALUE_REQUIRED, 'The changelog file to create or modify; defaults to CHANGELOG.md'),
    ]);

$application->addCommands([
    new Bump\BumpCommand(Bump\BumpCommand::BUMP_BUGFIX, $dispatcher, 'bump'),
    new Bump\BumpCommand(Bump\BumpCommand::BUMP_BUGFIX, $dispatcher, 'bump:bugfix'),
    new Bump\BumpCommand(Bump\BumpCommand::BUMP_BUGFIX, $dispatcher, 'bump:patch'),
    new Bump\BumpCommand(Bump\BumpCommand::BUMP_MINOR, $dispatcher, 'bump:minor'),
    new Bump\BumpCommand(Bump\BumpCommand::BUMP_MAJOR, $dispatcher, 'bump:major'),
    new Bump\BumpToVersionCommand($dispatcher, 'bump:to-version'),
    new ConfigCommand\CreateCommand($dispatcher, 'config:create'),
    new ConfigCommand\EditCommand($dispatcher, 'config:edit'),
    new ConfigCommand\RemoveCommand($dispatcher, 'config:remove'),
    new ConfigCommand\ShowCommand($dispatcher, 'config:show'),
    new EntryCommand($dispatcher, 'entry:added'),
    new EntryCommand($dispatcher, 'entry:changed'),
    new EntryCommand($dispatcher, 'entry:deprecated'),
    new EntryCommand($dispatcher, 'entry:removed'),
    new EntryCommand($dispatcher, 'entry:fixed'),
    new Changelog\NewCommand($dispatcher, 'changelog:new'),
    new ReadyCommand($dispatcher, 'ready'),
    new ReleaseCommand($dispatcher, 'release'),
    new TaggerCommand($dispatcher, 'tag'),
    new Version\EditCommand($dispatcher, 'version:edit'),
    new Version\ListCommand($dispatcher, 'version:list'),
    new Version\RemoveCommand($dispatcher, 'version:remove'),
    new Version\ShowCommand($dispatcher, 'version:show'),
]);
$application->run();
